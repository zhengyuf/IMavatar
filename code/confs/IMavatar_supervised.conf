train{
    # folder structure: exps_folder/subject/methodname/train_split/train/[checkpoints, saved conf]
    #                                                             /eval/test_split/step/image_folders
    exps_folder = ../data/experiments/ # location of experiments folder, use ln -s to link to data disk
    methodname = IMavatar
    dataset_class = datasets.real_dataset.FaceDataset
    model_class = model.implicit_morphable_model.IMavatar
    loss_class = model.loss.Loss
    learning_rate = 1.0e-4
    learning_rate_cam = 1.0e-4
    num_pixels = 2048
    batch_size = 1
    plot_freq = 1
    alpha_milestones = []
    alpha_factor = 2
    sched_milestones = [400, 800]
    sched_factor = 0.5
    optimize_latent_code=False
    optimize_expression=False
    optimize_camera=True
}
plot{
    plot_nimgs =2
    max_depth = 6.0
    min_depth = 3.0
    res_init = 32
    res_up = 3
}
loss{
    mask_weight = 100.0
    lbs_weight = 1.0
    flame_distance_weight = 10000.0
    alpha = 50.0
    gt_w_seg=True
    expression_reg_weight = 0.0
    pose_reg_weight = 0.0
    cam_reg_weight = 0.0
}
dataset{
    data_folder = ../data/datasets
    subject_name = subject1
    json_name = flame_params.json
    train{
        sub_dir = [MVI_1810, MVI_1814] # in main paper, we used [MVI_1810, MVI_1811]
        img_res = [256, 256]
        subsample = 1
    }
    test{
        sub_dir = [MVI_1812]
        img_res = [256, 256]
        subsample=  200
    }
}
model{
    feature_vector_size = 256
    geometry_network
    {
        d_in = 3
        condition_in=0,
        d_out = 1
        dims = [ 512, 512, 512, 512, 512, 512, 512, 512 ]
        geometric_init = True
        bias = 0.6
        skip_in = [4]
        weight_norm = True
        multires = 6
    }
    rendering_network
    {
        d_in = 6
        bottleneck = 8
        condition_in = 53
        b_out = 3
        dims = [ 512, 512, 512, 512]
        weight_norm = True
        multires_view = 0
        multires_pnts = 4
    }
    ray_tracer
    {
        object_bounding_sphere = 1.2
        sdf_threshold = 5.0e-5
        line_search_step = 0.5
        line_step_iters = 3
        sphere_tracing_iters = 10
        n_steps = 100
        n_secant_steps = 8
        use_sphere_tracing = False
    }
    deformer_class = model.deformer_network.ForwardDeformer
    deformer_network
    {
        d_in = 3
        dims = [128, 128, 128, 128]
        weight_norm = True
        multires = 0
	    num_exp = 50
	    ghostbone = True
    }
}
